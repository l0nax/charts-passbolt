---
suite: automated jwt keys creation install
release:
  name: test
values:
  - values-test.yaml
tests:
  - it: should create a jwt job
    templates:
      - job-create-jwt.yaml
    set:
      jwtServerPublic: ""
      jwtServerPrivate: ""
    asserts:
      - containsDocument:
          apiVersion: batch/v1
          kind: Job
          name: test-passbolt-job-create-jwt-keys

  - it: should not create a gpg job if key values are supplied
    templates:
      - job-create-jwt.yaml
    set:
      jwtServerPublic: "test"
      jwtServerPrivate: "test"
    asserts:
      - hasDocuments:
          count: 0

  - it: should not create a gpg job if jwt auth is disabled
    templates:
      - job-create-jwt.yaml
    set:
      jwtServerPublic: "test"
      jwtServerPrivate: "test"
      passboltEnv.plain.PASSBOLT_PLUGINS_JWT_AUTHENTICATION_ENABLED: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should not create a gpg job if an existing secret is supplied
    templates:
      - job-create-jwt.yaml
    set:
      jwtExistingSecret: "my-jwt-secret"
    asserts:
      - hasDocuments:
          count: 0

  - it: should be executed only on pre-install
    templates:
      - job-create-jwt.yaml
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-install

  - it: should restart on failure
    templates:
      - job-create-jwt.yaml
    asserts:
      - equal:
          path: spec.template.spec.restartPolicy
          value: OnFailure

  - it: should patch the jwt secret
    templates:
      - job-create-jwt.yaml
    asserts:
      - matchRegex:
          path: spec.template.spec.containers[0].args[1]
          pattern: .*./kubectl patch secret test-passbolt-sec-jwt .*PRIVATE_JWT_KEY.*
      - matchRegex:
          path: spec.template.spec.containers[0].args[1]
          pattern: .*./kubectl patch secret test-passbolt-sec-jwt .*PUBLIC_JWT_KEY.*

  - it: should have a jwt-secret with smaller weight than jwt secret job
    templates:
      - secret-gpg.yaml
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "-1"

  - it: should have a jwt-secret with higher weight than jwt secret job
    templates:
      - job-create-jwt.yaml
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "0"

  - it: should create an empty jwt secret by default
    templates:
      - secret-jwt.yaml
    set:
      jwtServerPublic: ""
      jwtServerPrivate: ""
    asserts:
      - equal:
          path: data["jwt.key"]
          value: ""
      - equal:
          path: data["jwt.pem"]
          value: ""

  - it: should create an non-empty jwt secret by default
    templates:
      - secret-jwt.yaml
    set:
      jwtServerPublic: "test"
      jwtServerPrivate: "test"
    asserts:
      - equal:
          path: data["jwt.key"]
          value: "test"
      - equal:
          path: data["jwt.pem"]
          value: "test"

  - it: should have a lifecycle that installs before upgrade and before install
    templates:
      - secret-jwt.yaml
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-install, pre-upgrade

  - it: should create a jwt job with pre-install hook
    templates:
      - job-create-jwt.yaml
    set:
      jwtServerPublic: ""
      jwtServerPrivate: ""
    asserts:
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: "pre-install"
